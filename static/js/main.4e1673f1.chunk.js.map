{"version":3,"sources":["components/PokemonInfo/PokemonInfo.jsx","components/PokemonList/PokemonList.jsx","App.js","reportWebVitals.js","index.jsx"],"names":["PokemonInfo","name","Grid","container","item","xs","spacing","target","alt","src","width","height","PokemonList","allPokemons","GridList","cellHeight","cols","map","pokemon","GridListTile","GridListTileBar","title","id","App","useState","setAllPokemons","nombre","urlPokemons","setUrlPokemons","getAllPokemons","createPokemonObject","a","results","forEach","fetch","res","json","data","currentList","sort","b","next","useEffect","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iQAkBeA,EAdK,SAAC,GAAY,IAAXC,EAAU,EAAVA,KAClB,OACI,cAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,MAAI,EAACC,GAAI,GAAIC,QAAS,EAAtC,SACI,mBAAGC,OAAO,SAAV,SACI,qBAAKC,IAAI,UAAUC,IAAG,kDAA6CR,EAA7C,QAAyDS,MAAM,MAAMC,OAAO,a,wBCkBnGC,EAnBK,SAAC,GAAmB,IAAlBC,EAAiB,EAAjBA,YAClB,OACE,cAACC,EAAA,EAAD,CAAUR,QAAS,GAAIS,WAAY,IAAKC,KAAM,EAA9C,SAEIH,EAAYI,KAAI,SAAAC,GAAO,OACrB,eAACC,EAAA,EAAD,WACE,cAAC,EAAD,CAAalB,KAAMiB,EAAQjB,OACzB,cAACmB,EAAA,EAAD,CAAiBC,MAAQH,EAAQjB,SAFlBiB,EAAQI,UC+BxBC,MAtCf,WAEE,MAAqCC,mBAAS,IAA9C,mBAAMX,EAAN,KAAmBY,EAAnB,KACA,EAA+BD,mBAAS,CAAC,CAACE,OAAQ,UAAlD,mBACA,GADA,UACsCF,mBAAS,+CAA/C,mBAAOG,EAAP,KAAoBC,EAApB,KAEMC,EAAc,uCAAG,qBAOZC,EAPY,SAAAC,EAAA,6DAOZD,EAPY,SAOQE,GAC3BA,EAAQC,QAAR,uCAAiB,WAAMf,GAAN,iBAAAa,EAAA,sEACGG,MAAM,qCAAD,OAAsChB,EAAQjB,OADtD,cACTkC,EADS,gBAEKA,EAAIC,OAFT,cAETC,EAFS,OAGfZ,GAAgB,SAAAa,GAAW,4BAAQA,GAAR,CAAqBD,OAHjC,SAITxB,EAAY0B,MAAK,SAACR,EAAGS,GAAJ,OAAUT,EAAET,GAAKkB,EAAElB,MAJ3B,2CAAjB,wDARmB,SACHY,MAAMP,GADH,cACfQ,EADe,gBAEFA,EAAIC,OAFF,OAEfC,EAFe,OAKrBT,EAAeS,EAAKI,MAUpBX,EAAoBO,EAAKL,SAfJ,2CAAH,qDAuBpB,OAJAU,qBAAU,WACRb,MACE,IAGF,sBAAKc,UAAU,MAAf,UACE,iDACA,cAAC,EAAD,CAAa9B,YAAaA,QCzBjB+B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.4e1673f1.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport Grid from '@material-ui/core/Grid'\r\n\r\nconst PokemonInfo = ({name}) => {\r\n    return (\r\n        <Grid container item xs={12} spacing={3}>\r\n            <a target=\"_blank\">\r\n                <img alt=\"pokemon\" src={`https://img.pokemondb.net/artwork/large/${name}.jpg`} width=\"360\" height=\"336\"/>\r\n            </a>\r\n        </Grid>\r\n    )\r\n}\r\n\r\nPokemonInfo.propTypes = {\r\n    name: PropTypes.string.isRequired\r\n}\r\n\r\nexport default PokemonInfo\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport PokemonInfo from './../PokemonInfo/PokemonInfo'\r\nimport { GridList } from '@material-ui/core';\r\nimport GridListTile from '@material-ui/core/GridListTile';\r\nimport GridListTileBar from '@material-ui/core/GridListTileBar';\r\n\r\nconst PokemonList = ({allPokemons}) => {\r\n    return (      \r\n      <GridList spacing={15} cellHeight={400} cols={5}>\r\n        {\r\n          allPokemons.map(pokemon => (\r\n            <GridListTile key={pokemon.id}>\r\n              <PokemonInfo name={pokemon.name}></PokemonInfo>                       \r\n                <GridListTileBar title={ pokemon.name }/>\r\n            </GridListTile>\r\n          ))\r\n        }\r\n      </GridList>\r\n    )\r\n}\r\n\r\nPokemonList.propTypes = {\r\n  allPokemons: PropTypes.string.isRequired\r\n}\r\n\r\nexport default PokemonList\r\n","import React, { useEffect, useState } from 'react'\nimport './App.css';\nimport PokemonList from './components/PokemonList/PokemonList'\nimport PokemonInfo from './components/PokemonInfo/PokemonInfo'\n\nfunction App() {\n\n  const[allPokemons, setAllPokemons] = useState([])\n  const[cualquir, setCualquir] = useState([{nombre: \"test\"}])\n  const [urlPokemons, setUrlPokemons] = useState('https://pokeapi.co/api/v2/pokemon?limit=10')\n\n  const getAllPokemons = async () => {\n    const res = await fetch(urlPokemons)\n    const data = await res.json()\n    //let columns = width === 'xs' || width === 'sm'  ? 1 : 2;\n\n    setUrlPokemons(data.next)\n\n    function createPokemonObject(results)  {\n      results.forEach( async pokemon => {\n        const res = await fetch(`https://pokeapi.co/api/v2/pokemon/${pokemon.name}`)\n        const data =  await res.json()\n        setAllPokemons( currentList => [...currentList, data])\n        await allPokemons.sort((a, b) => a.id - b.id)\n      })\n    }\n    createPokemonObject(data.results)\n  }\n\n\n  useEffect(() => {\n    getAllPokemons()\n   }, [])\n\n  return (\n    <div className=\"App\">\n      <h1>Pokemom on Huom</h1>\n      <PokemonList allPokemons={allPokemons}></PokemonList>\n    </div>\n  );\n}\n\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}