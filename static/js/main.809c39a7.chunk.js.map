{"version":3,"sources":["components/Layout/Footer.jsx","components/PokemonInfo/PokemonInfo.jsx","components/PokemonList/PokemonList.jsx","components/Layout/Header.jsx","pages/main.jsx","App.js","reportWebVitals.js","index.jsx"],"names":["Footer","className","useStyles","makeStyles","root","maxWidth","color","title","fontSize","pos","marginBottom","media","height","width","paddingTop","PokemonInfo","name","url","useState","pokemon","setPokemon","pokemonDesc","setPokemonDesc","classes","urlImg","getPokemon","a","fetch","res","json","data","getPokemonDesc","id","undefined","descriptions","description","useEffect","Card","xs","sm","md","CardActionArea","CardHeader","avatar","Avatar","CardMedia","image","CardContent","Typography","gutterBottom","variant","component","CardActions","Button","size","PokemonList","allPokemons","Grid","container","spacing","columns","cellHeight","map","GridListTile","Header","setAllPokemons","getAllPokemons","results","options","option","firstLetter","toUpperCase","console","log","test","Autocomplete","sort","b","localeCompare","groupBy","getOptionLabel","style","renderInput","params","TextField","label","Main","urlPokemons","direction","justify","item","alignItems","App","background","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.809c39a7.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Footer = () => {\r\n    return ( \r\n      <footer className=\"page-footer font-small blue pt-4\">\r\n        <div className=\"footer-copyright text-center py-3\">© 2021 test\r\n        </div>\r\n      </footer>   \r\n    );\r\n}\r\n \r\nexport default Footer;","import React, { useEffect, useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nimport CardActionArea from '@material-ui/core/CardActionArea';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\n\r\nimport CardHeader from '@material-ui/core/CardHeader';\r\nimport Avatar from '@material-ui/core/Avatar';\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        maxWidth: 345,\r\n        color: '#212121',\r\n    },\r\n    title: {\r\n        fontSize: 20,\r\n    },\r\n    pos: {\r\n        marginBottom: 12,\r\n    },\r\n    media: {\r\n        height: 140,\r\n        width: 360,\r\n        paddingTop: '56.25%', // 16:9\r\n    },\r\n  });\r\n\r\nconst PokemonInfo = ({name, url}) => {\r\n    \r\n    const[pokemon, setPokemon] = useState([])\r\n    const[pokemonDesc, setPokemonDesc] = useState([])\r\n    const classes = useStyles();\r\n    let urlImg = `https://img.pokemondb.net/artwork/large/${name}.jpg`\r\n    let urlPokemonDesc = \"https://pokeapi.co/api/v2/characteristic/\"\r\n\r\n    const getPokemon = async (url) => {\r\n        const res = await fetch(url)\r\n        const data = await res.json()\r\n        setPokemon(data)\r\n    }\r\n\r\n    const getPokemonDesc = async (id) => {\r\n        if(id === undefined) return\r\n        const res = await fetch(urlPokemonDesc+id)\r\n        const data = await res.json()\r\n        setPokemonDesc(data.descriptions[1].description)\r\n    }\r\n\r\n    useEffect(() => {\r\n        getPokemon(url)\r\n    }, [])   \r\n\r\n    useEffect(() => {\r\n        getPokemonDesc(pokemon.id)\r\n    }, [])\r\n\r\n    return (\r\n        <Card className={classes.root} xs={2} sm={3} md={5}>\r\n            <CardActionArea>\r\n            <CardHeader\r\n                avatar={\r\n                <Avatar aria-label=\"recipe\" className={classes.avatar}>\r\n                    {pokemon.id}\r\n                </Avatar>                \r\n                }\r\n                title={pokemonDesc}\r\n            />\r\n                <CardMedia className={classes.media} image={urlImg} title={name}/>                \r\n                <CardContent color=\"primary\">\r\n                    <Typography gutterBottom variant=\"h5\" component=\"h2\">{name}</Typography>                    \r\n                </CardContent>\r\n            </CardActionArea>\r\n            <CardActions>\r\n                <Button size=\"small\">Ver más</Button>\r\n            </CardActions>\r\n        </Card>\r\n    );\r\n}\r\n\r\nPokemonInfo.propTypes = {\r\n    name: PropTypes.string.isRequired,\r\n    url: PropTypes.string.isRequired\r\n}\r\n\r\nexport default PokemonInfo\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport PokemonInfo from './../PokemonInfo/PokemonInfo'\r\nimport GridListTile from '@material-ui/core/GridListTile';\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nconst PokemonList = ({allPokemons}) => {\r\n  return (      \r\n    <Grid container spacing={{ xs: 2, md: 3 }} columns={{ xs: 4, sm: 8, md: 12 }} cellHeight={400}>\r\n      {\r\n        allPokemons.map(pokemon => (\r\n          <GridListTile>\r\n            <PokemonInfo name={pokemon.name} url={pokemon.url}></PokemonInfo>\r\n          </GridListTile>\r\n        ))\r\n      }\r\n    </Grid>\r\n  )\r\n}\r\n\r\nPokemonList.propTypes = {\r\n  allPokemons: PropTypes.string.isRequired\r\n}\r\n\r\nexport default PokemonList\r\n","import React, { Fragment, useEffect, useState } from 'react'\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport PropTypes from 'prop-types'\r\n\r\nconst Header = () => {\r\n\r\n    const[allPokemons, setAllPokemons] = useState([])\r\n    const urlPokemons = 'https://pokeapi.co/api/v2/pokemon?limit=1118';\r\n\r\n    const getAllPokemons = async () => {\r\n        const res = await fetch(urlPokemons)\r\n        const data = await res.json()\r\n        setAllPokemons(data.results)\r\n    }\r\n\r\n    useEffect(() => {\r\n        getAllPokemons()\r\n    }, []) \r\n\r\n    const options = allPokemons.map((option) => {\r\n        const firstLetter = option.name[0].toUpperCase();\r\n        console.log(firstLetter)\r\n        return {\r\n        firstLetter: /[0-9]/.test(firstLetter) ? '0-9' : firstLetter,\r\n        ...option,\r\n        };\r\n    });\r\n\r\n    return (\r\n        <Fragment>            \r\n            <h1>Pokemon</h1>\r\n            <Autocomplete\r\n            id=\"grouped-pokemon\"\r\n            options={options.sort((a, b) => -b.firstLetter.localeCompare(a.firstLetter))}\r\n            groupBy={(option) => option.firstLetter}\r\n            getOptionLabel={(option) => option.name}\r\n            style={{ width: 300 }}\r\n            renderInput={(params) => <TextField {...params} label=\"Buscador\" variant=\"outlined\" />}\r\n            />\r\n        </Fragment>\r\n\r\n    );\r\n}\r\n\r\nHeader.propTypes = {\r\n\r\n}\r\n\r\nexport default Header","import React, { Fragment, useEffect, useState } from 'react'\r\nimport Footer from './../components/Layout/Footer'\r\nimport Grid from '@material-ui/core/Grid';\r\nimport PokemonList from './../components/PokemonList/PokemonList'\r\nimport Header from './../components/Layout/Header'\r\n\r\nconst Main = () => {\r\n    const[allPokemons, setAllPokemons] = useState([])\r\n    const [urlPokemons, setUrlPokemons] = useState('https://pokeapi.co/api/v2/pokemon?limit=10')\r\n\r\n    const getAllPokemons = async () => {\r\n    const res = await fetch(urlPokemons)\r\n    const data = await res.json()\r\n    setAllPokemons(data.results)\r\n    }\r\n\r\n    useEffect(() => {\r\n    getAllPokemons()\r\n    }, [])\r\n\r\n    return (\r\n        <Fragment>\r\n            <Grid container>\r\n                <Header allPokemons={allPokemons} /> \r\n            </Grid>\r\n            <Grid container\r\n                direction=\"column\"\r\n                justify=\"center\"\r\n                className=\"full\">\r\n                <div className=\"highlight\">\r\n                    <Grid item container xs={12}\r\n                        justify=\"center\"\r\n                        alignItems=\"center\">\r\n                    <PokemonList allPokemons={allPokemons}></PokemonList>\r\n                    </Grid>\r\n                </div>\r\n            </Grid> \r\n            <Grid container>\r\n                <Footer /> \r\n            </Grid> \r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default Main\r\n","import React from 'react'\nimport './App.css';\nimport Main from './pages/main'\n\nfunction App() {\n\n  return (\n    <div className=\"App\" style={{ background: '0.5px solid rgb(233, 233, 233)'}}>      \n        <Main />\n    </div>\n  );\n}\n\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}