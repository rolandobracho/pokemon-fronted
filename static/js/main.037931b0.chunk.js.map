{"version":3,"sources":["components/Layout/Footer.jsx","components/Layout/Header.jsx","components/PokemonInfo/PokemonInfo.jsx","components/PokemonList/PokemonList.jsx","pages/PokemonMain.jsx","pages/Main.jsx","App.js","reportWebVitals.js","index.jsx"],"names":["Footer","className","Header","useState","allPokemons","setAllPokemons","getAllPokemons","a","fetch","res","json","data","results","useEffect","options","map","option","firstLetter","name","toUpperCase","console","log","test","Autocomplete","id","sort","b","localeCompare","groupBy","getOptionLabel","style","width","renderInput","params","TextField","label","variant","useStyles","makeStyles","root","maxWidth","color","title","fontSize","pos","marginBottom","media","height","paddingTop","PokemonInfo","url","pokemon","setPokemon","pokemonDesc","setPokemonDesc","classes","urlImg","getPokemon","types","getPokemonDesc","undefined","descriptions","description","Card","xs","sm","md","CardActionArea","CardHeader","avatar","Avatar","CardMedia","image","CardContent","Typography","gutterBottom","component","CardActions","Button","size","type","PokemonList","Grid","container","spacing","columns","cellHeight","GridListTile","Loader","Skeleton","App","scroller","useRef","currentPageUrl","setCurrentPageUrl","nextPageUrl","setNextPageUrl","useLoadMoreOnScroll","fetchSize","limit","isFetching","start","end","setIsFetching","doneFetching","forceDonefetching","fetchPokemons","response","next","gotoNextPage","item","justify","alignItems","List","ref","onClick","Main","direction","PokemonMain","background","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.037931b0.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Footer = () => {\r\n    return ( \r\n      <footer className=\"page-footer font-small blue pt-4\">\r\n        <div className=\"footer-copyright text-center py-3\">Â© 2021 test\r\n        </div>\r\n      </footer>   \r\n    );\r\n}\r\n \r\nexport default Footer;","import React, { Fragment, useEffect, useState } from 'react'\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport PropTypes from 'prop-types'\r\n\r\nconst Header = () => {\r\n\r\n    const[allPokemons, setAllPokemons] = useState([])\r\n    const urlPokemons = 'https://pokeapi.co/api/v2/pokemon?limit=1118';\r\n\r\n    const getAllPokemons = async () => {\r\n        const res = await fetch(urlPokemons)\r\n        const data = await res.json()\r\n        setAllPokemons(data.results)\r\n    }\r\n\r\n    useEffect(() => {\r\n        getAllPokemons()\r\n    }, []) \r\n\r\n    const options = allPokemons.map((option) => {\r\n        const firstLetter = option.name[0].toUpperCase();\r\n        console.log(firstLetter)\r\n        return {\r\n        firstLetter: /[0-9]/.test(firstLetter) ? '0-9' : firstLetter,\r\n        ...option,\r\n        };\r\n    });\r\n\r\n    return (\r\n        <Fragment>            \r\n            <h1>Pokemon</h1>\r\n            <Autocomplete\r\n            id=\"grouped-pokemon\"\r\n            options={options.sort((a, b) => -b.firstLetter.localeCompare(a.firstLetter))}\r\n            groupBy={(option) => option.firstLetter}\r\n            getOptionLabel={(option) => option.name}\r\n            style={{ width: 300 }}\r\n            renderInput={(params) => <TextField {...params} label=\"Buscador\" variant=\"outlined\" />}\r\n            />\r\n        </Fragment>\r\n\r\n    );\r\n}\r\n\r\nHeader.propTypes = {\r\n\r\n}\r\n\r\nexport default Header","import React, { useEffect, useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { Skeleton } from \"@material-ui/lab\";\r\nimport CardActionArea from '@material-ui/core/CardActionArea';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\n\r\nimport CardHeader from '@material-ui/core/CardHeader';\r\nimport Avatar from '@material-ui/core/Avatar';\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        maxWidth: 345,\r\n        color: '#212121',\r\n    },\r\n    title: {\r\n        fontSize: 20,\r\n    },\r\n    pos: {\r\n        marginBottom: 12,\r\n    },\r\n    media: {\r\n        height: 140,\r\n        width: 360,\r\n        paddingTop: '56.25%', // 16:9\r\n    },\r\n  });\r\n\r\nconst PokemonInfo = ({name, url}) => {\r\n    \r\n    const[pokemon, setPokemon] = useState([])\r\n    const[pokemonDesc, setPokemonDesc] = useState([])\r\n    const classes = useStyles();\r\n    let urlImg = `https://img.pokemondb.net/artwork/large/${name}.jpg`\r\n    let urlPokemonDesc = \"https://pokeapi.co/api/v2/characteristic/\"\r\n\r\n    const getPokemon = async (url) => {\r\n        const res = await fetch(url)\r\n        const data = await res.json()\r\n        console.log(data.types)\r\n        setPokemon(data)\r\n    }\r\n\r\n    const getPokemonDesc = async (id) => {\r\n        if(id === undefined) return\r\n        const res = await fetch(urlPokemonDesc+id)\r\n        const data = await res.json()\r\n        setPokemonDesc(data.descriptions[1].description)\r\n    }\r\n\r\n    useEffect(() => {\r\n        getPokemon(url)\r\n    }, [])   \r\n\r\n    useEffect(() => {\r\n        getPokemonDesc(pokemon.id)\r\n    }, [pokemon])\r\n\r\n    return (\r\n        <Card className={classes.root} xs={2} sm={3} md={5}>\r\n            <CardActionArea>\r\n            <CardHeader\r\n                avatar={\r\n                <Avatar aria-label=\"recipe\" className={classes.avatar}>\r\n                    {pokemon.id}\r\n                </Avatar>                \r\n                }\r\n                title={pokemonDesc}\r\n            />\r\n                <CardMedia className={classes.media} image={urlImg} title={name}/>                \r\n                <CardContent color=\"primary\">\r\n                    <Typography gutterBottom variant=\"h5\" component=\"h2\">{name}</Typography>                    \r\n                </CardContent>\r\n            </CardActionArea>\r\n            <CardActions>                \r\n                {pokemon && pokemon.types && pokemon.types[0] ? <Button size=\"small\" variant=\"outlined\" color=\"primary\">{pokemon.types[0].type.name}</Button> : null}\r\n                {pokemon && pokemon.types && pokemon.types[1] ? <Button size=\"small\" variant=\"outlined\" color=\"primary\">{pokemon.types[1].type.name}</Button> : null}                \r\n            </CardActions>\r\n        </Card>\r\n        \r\n    );\r\n}\r\n\r\nPokemonInfo.propTypes = {\r\n    name: PropTypes.string.isRequired,\r\n    url: PropTypes.string.isRequired\r\n}\r\n\r\nexport default PokemonInfo\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport PokemonInfo from './../PokemonInfo/PokemonInfo'\r\nimport GridListTile from '@material-ui/core/GridListTile';\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nconst PokemonList = ({allPokemons}) => {\r\n  return (      \r\n    <Grid container spacing={{ xs: 2, md: 3 }} columns={{ xs: 4, sm: 8, md: 12 }} cellHeight={400}>\r\n      {\r\n        allPokemons.map(pokemon => (\r\n          <GridListTile>\r\n            <PokemonInfo name={pokemon.name} url={pokemon.url}></PokemonInfo>\r\n          </GridListTile>\r\n        ))\r\n      }\r\n    </Grid>\r\n  )\r\n}\r\n\r\nPokemonList.propTypes = {\r\n  allPokemons: PropTypes.string.isRequired\r\n}\r\n\r\nexport default PokemonList\r\n","import React, { useRef, useState, useEffect } from \"react\";\r\nimport { List } from \"@material-ui/core\";\r\nimport { Skeleton } from \"@material-ui/lab\";\r\nimport useLoadMoreOnScroll from \"react-hook-pagination\";\r\nimport Grid from '@material-ui/core/Grid';\r\nimport PokemonList from './../components/PokemonList/PokemonList'\r\nimport Button from '@material-ui/core/Button';\r\n\r\nfunction Loader() {\r\n  return (\r\n    <div>\r\n      <Skeleton variant=\"circle\" width={40} height={40} />\r\n      <Skeleton variant=\"text\" height={120} />\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction App() {\r\n  const scroller = useRef();\r\n  const[allPokemons, setAllPokemons] = useState([])\r\n  const [currentPageUrl, setCurrentPageUrl] = useState(\"https://pokeapi.co/api/v2/pokemon?limit=10&offset=0\")\r\n  const [nextPageUrl, setNextPageUrl] = useState()\r\n\r\n  const {\r\n    start, \r\n    end, \r\n    isFetching,\r\n    doneFetching,\r\n    setIsFetching,\r\n    forceDonefetching\r\n  } = useLoadMoreOnScroll({ fetchSize: 10, scroller: scroller, limit: 10 });\r\n\r\n  const fetchPokemons = async (url) => {\r\n    const response = await fetch(url);\r\n    const data = await response.json()\r\n    if (data.next == null) forceDonefetching() \r\n    setAllPokemons([...allPokemons, ...data.results]);\r\n    setIsFetching(false);\r\n    setNextPageUrl(data.next)\r\n    return data\r\n  };\r\n\r\n  function gotoNextPage() {\r\n    setCurrentPageUrl(nextPageUrl)\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (currentPageUrl) {\r\n      fetchPokemons(currentPageUrl)\r\n    }\r\n  }, [currentPageUrl]);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n        <div className=\"highlight\">\r\n            <Grid item container xs={12}\r\n                justify=\"center\"\r\n                alignItems=\"center\">\r\n                <List ref={scroller}>\r\n                    <PokemonList allPokemons={allPokemons}></PokemonList>\r\n                    {isFetching && <Loader />}\r\n                </List>\r\n                <div>\r\n                    {gotoNextPage && <Button size=\"large\" variant=\"contained\" color=\"primary\" onClick={gotoNextPage}>Ver mas</Button>}\r\n                </div>\r\n            </Grid>\r\n        </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;","import React, { Fragment, useEffect, useState } from 'react'\r\nimport Footer from './../components/Layout/Footer'\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Header from './../components/Layout/Header'\r\nimport PokemonMain from '../pages/PokemonMain'\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nconst Main = () => {\r\n    return (\r\n        <Fragment>\r\n        <Typography variant=\"h2\">Listado Pokemones</Typography>\r\n        <Grid container>                \r\n            <Header /> \r\n        </Grid>\r\n        <Grid container\r\n            direction=\"column\"\r\n            justify=\"center\"\r\n            className=\"full\">\r\n            <PokemonMain></PokemonMain>\r\n        </Grid> \r\n        <Grid container>\r\n            <Footer /> \r\n        </Grid> \r\n    </Fragment>\r\n    )\r\n}\r\n\r\nexport default Main\r\n","import React from 'react'\nimport './App.css';\nimport Main from './pages/Main'\n\nfunction App() {\n\n  return (\n    <div className=\"App\" style={{ background: '0.5px solid rgb(233, 233, 233)'}}>      \n        <Main />\n    </div>\n  );\n}\n\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}